<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_gos.Debug</api_name>
        <client_callable>false</client_callable>
        <description>Utility for debugging. Enabled with a system property. Adds multiple lines to the same log entry. Uses a unique table for storing logs.</description>
        <name>Debug</name>
        <script><![CDATA[/**
* Utility for debugging. Enabled with a system property. 
* Adds multiple lines to the same log entry. Uses a unique table for storing logs.
*
* @author SERVICE-NOW.COM\walter.brame
*/
var Debug = Class.create();
Debug.prototype = {
	/*
	* @param "String" prefix
	*                       Prepended to the log messages to help understand context
	*/
    initialize: function(prefix) {
		this.prefix = prefix;
		this.messages = [];
    },
	
	isActive : function ( ) {
		var ret = false;
		var property = gs.getProperty('x_snc_gos.debug', 'false');
		if ( property == 'true' ) {
			ret = true;
		}
		return ret;
	},
	
	/*
	* @param "String" message
	*                       The debug message
	* @param "String" prefix
	*                       Prepended to the log messages to help understand context.
	*                       In-line prefix set when method is called overrides the constructor prefix.
	*/
	log : function (message, prefix) {
		if ( this.isActive() == true ) {
			var pre = null;
			if ( !gs.nil(prefix) ) {
				pre = prefix;
			} else if ( !gs.nil(this.prefix) ) {
				pre = this.prefix;
			}
			if ( pre != null) {
				message = pre + ': ' + message;
			}
			this.messages.push(message);
		}
	},

	write : function ( ) {
		if (this.messages.length != 0) {
			var messages = this.messages.join('\n');
			var debug = new GlideRecord('x_snc_gos_log');
			debug.newRecord();
			debug.message = messages;
			debug.insert();
			this.messages = [];
		}
	},
	
	// To add messages from one debugger to another debugger
	getMessages : function () {
		return this.messages.join('\n');
	},

    type: 'Debug'
};

Debug.write = function (message) {
	var debug = new Debug();
	debug.log(message);
	debug.write(  );
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>walter.brame</sys_created_by>
        <sys_created_on>2018-09-14 16:13:03</sys_created_on>
        <sys_id>eb1e71a5dbe02b009f7d73568c9619b4</sys_id>
        <sys_mod_count>7</sys_mod_count>
        <sys_name>Debug</sys_name>
        <sys_package display_value="GOS" source="x_snc_gos">f7e735eddba02b009f7d73568c961971</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="GOS">f7e735eddba02b009f7d73568c961971</sys_scope>
        <sys_update_name>sys_script_include_eb1e71a5dbe02b009f7d73568c9619b4</sys_update_name>
        <sys_updated_by>walter.brame</sys_updated_by>
        <sys_updated_on>2018-09-24 21:19:05</sys_updated_on>
    </sys_script_include>
</record_update>
